import shutil
from abc import abstractmethod

from lib.DownloadHandler import DownloadHandler
from lib.IJSONHandler import IJSONHandler


class JSONFileHandler(DownloadHandler):
    def __init__(self, feed_type, prefix):
        super().__init__(feed_type)

        self.is_update = True

        self.prefix = prefix

        self.ijson_handler = IJSONHandler()

    def __repr__(self):
        """return string representation of object"""
        return f"<< JSONFileHandler:{self.feed_type} >>"

    def file_to_queue(self, file_tuple):

        working_dir, filename = file_tuple

        # adjust the interval counter for debug logging when updating
        interval = 500 if self.is_update else 5000
        self.logger.debug(f"Starting processing of file: {filename}")
        for x, cpe in enumerate(self.ijson_handler.fetch(filename=filename, prefix=self.prefix), start=1):
            self.process_item(item=cpe)
            if x % interval == 0:
                self.logger.debug(f"Processed {x} entries from file: {filename}")

        try:
            self.logger.debug(f"Removing working dir: {working_dir}")
            shutil.rmtree(working_dir)
        except Exception as err:
            self.logger.error(f"Failed to remove working dir; error produced: {err}")

    @abstractmethod
    def update(self, **kwargs):
        raise NotImplementedError

    @abstractmethod
    def populate(self, **kwargs):
        raise NotImplementedError
