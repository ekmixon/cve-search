#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# CPEList class, used in black-and whitelists
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2014-2018  Pieter-Jan Moreels - pieterjan.moreels@gmail.com

# Imports
# make sure these modules are available on your system
import os
import sys
import json

runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

from lib.Toolkit import toStringFormattedCPE
import lib.DatabaseLayer as db


class CPEList:
    def __init__(self, collection, args):
        self.collection = collection.title()
        self.args = args

    # check if there are items in the collection
    def countItems(self):
        return db.getSize(f"mgmt_{self.collection.lower()}")

    # check if a cpe is in the list
    def check(self, cpe):
        return getattr(db, f"isIn{self.collection}")(cpe)

    # insert to database
    def insert(self, cpe, cpeType, comments=None):
        try:

            if comments is not None:
                comments = comments
            else:
                # split comments from cpe
                comments = cpe.split("#")
                del comments[0]

            cpeID = cpe.split("#")[0]
            if cpeType.lower() == "cpe":
                cpeID = toStringFormattedCPE(cpeID)
            # check format
            if cpeID and not self.check(cpeID):
                getattr(db, f"addTo{self.collection}")(cpeID, cpeType, comments)
                return True
            return False
        except Exception as ex:
            print(f"Error inserting item in database: {ex}")
            sys.exit()

    # remove a cpe from the list
    def remove(self, cpe):
        try:
            cpe = cpe.strip()
            # translate cpe
            if toStringFormattedCPE(cpe):
                cpe = toStringFormattedCPE(cpe)
            # check if the cpe is in the list
            if self.check(cpe):
                getattr(db, f"removeFrom{self.collection}")(cpe)
                return True
            else:
                return False
        except Exception as ex:
            print(f"Error removing item from database: {ex}")
            sys.exit()

    def update(self, cpeOld, cpeNew, cpeType):
        try:
            cpeOld = cpeOld.strip()
            cpeNew = cpeNew.strip()
            # translate cpes
            cpeOld = toStringFormattedCPE(cpeOld)
            cpeNew = toStringFormattedCPE(cpeNew)
            if cpeOld and cpeNew and self.check(cpeOld.split("#")[0]):
                cpeID = cpeNew.split("#")[0]
                cpeID.strip()
                # comments
                comments = cpeNew.split("#")
                del comments[0]
                getattr(db, f"update{self.collection}")(
                    cpeOld.split("#")[0], cpeID, cpeType, comments
                )

                return True
            return False
        except Exception as ex:
            print(ex)
            print(f"Error updating item in database: {ex}")
            sys.exit()

    # drop the collection
    def dropCollection(self):
        try:
            count = self.countItems()
            db.drop(f"mgmt_{self.collection.lower()}")
            return f"collection of {count} items dropped"
        except Exception as ex:
            return f"Error dropping the database: {ex}"

    # import a file that represents the cpe list
    def importList(self, importFile):
        count = 0
        # read each line from the import file and regex them to a cpe format
        try:
            importFile = (
                importFile.read().decode("utf-8").replace("\n", "").replace(" ", "")
            )
        except AttributeError:
            importFile = importFile.decode("utf-8").replace("\n", "").replace(" ", "")

        try:
            for line in json.loads(importFile):
                try:
                    t = line["type"]
                    if t not in ["cpe", "targetsoftware", "targethardware"]:
                        continue
                    cpe = line["id"]
                    if "comments" in line:
                        cpe += "#" + "#".join(line["comments"])
                    if self.insert(cpe, t):
                        count += 1
                except Exception as err:
                    return f"Error encountered: {err}"
            return f"{count} products added to the list"
        except IOError:
            return "The list is corrupted!"

    # export a file that represents the cpe list
    def exportList(self, exportFile=None):
        listed = getattr(db, f"get{self.collection}")()
        output = json.dumps(listed, sort_keys=True, indent=2)
        if exportFile is None:
            return output
        if not os.path.exists(exportFile) or self.args.f:
            with open(exportFile, "w") as export:
                export.write(output)
            if self.args.v:
                print(f"{len(listed)} listed items exported")
        else:
            print("file already exists")

    # process the arguments and use it to take actions
    def process(self):
        if self.args.d:
            # drop the list
            self.dropCollection()
        elif self.args.i:
            # get import file
            textfile = self.args.i
            # check if the collection is empty
            count = self.countItems()
            if count > 0 and self.args.f is False:
                # not empty and not forced to drop
                print("list already populated")
            else:
                # drop collection and repopulate it
                self.dropCollection()
                self.importList(open(textfile))
        elif self.args.e:
            # get export file
            textfile = self.args.e
            self.exportList(textfile)
        elif self.args.a or self.args.A:
            # get list of cpe's to add
            cpeList = self.args.a or list(open(self.args.A[0]))
            # add each item from the list
            count = sum(bool(self.insert(cpeID, self.args.t)) for cpeID in cpeList)
            if self.args.v:
                print(f"{count} products added to the list")
        elif self.args.r or self.args.R:
            # get list of cpe's to remove
            cpeList = self.args.r or list(open(self.args.R[0]))
            # remove each item from the list
            count = 0
            for cpeID in cpeList:
                amount = self.remove(cpeID)
                count += amount
            if self.args.v:
                print(f"{count} products removed from the list")
