#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# cve_doc converts CVE to asciidoc
#
# Software is free software released under the "GNU Affero General Public License v3.0"
#
# Copyright (c) 2015-2018  Alexandre Dulaunoy - a@foo.be
import json
import os
import re
import sys
from optparse import OptionParser

runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

from lib.Query import apigetcve

optp = OptionParser()
optp.add_option(
    "-c", "--cve", dest="cve", default="CVE-2015-0001", help="CVE id to convert"
)
optp.add_option(
    "-f", "--format", dest="format", default="asciidoc", help="output format : asciidoc"
)
optp.add_option(
    "-a",
    "--api",
    dest="api",
    default="http://cve.circl.lu/",
    help="HTTP API url (default: http://cve.circl.lu)",
)
(opts, args) = optp.parse_args()


cve = json.loads(apigetcve(opts.api, cveid=opts.cve))

if not cve:
    sys.exit(10)

print(f'= Common Vulnerabilities and Exposures - {cve["id"]}')
print(f'cve-search <{opts.api}/cve/{cve["id"]}>')
print(f'{cve["id"]},{cve["Modified"]}')
print(":toc:")
print(f'== {cve["id"]} Summary')
print("\n" + cve["summary"])

print("\n== Vulnerable configurations\n")
for vul in cve["vulnerable_configuration"]:
    print("* {}".format(re.sub(r"\n", "-", vul["title"])))
if cve.get("cvss"):
    print("\n== Common Vulnerability Scoring System")
    print(f'CVSS value:: {cve["cvss"]}')
if cve.get("impact"):
    print("\n== Impact Metrics")
    print('\n[cols="1,2"]')
    print("|===")
    types = ["availability", "confidentiality", "integrity"]
    for t in types:
        print(f"|{t.title()}")
        print(f'|{cve["impact"][t]}')
    print("|===")
if cve.get("access"):
    print("\n== Access to the vulnerability")
    print('\n[cols="1,2"]')
    print("|===")
    types = ["authentication", "complexity", "vector"]
    for t in types:
        print(f"|{t.title()}")
        print(f'|{cve["access"][t]}')
    print("|===")
if cve.get("references"):
    print("\n== References")
    if len(cve["references"]) > 1:
        for ref in cve["references"]:
            print(f"* {ref}")
    elif len(cve["references"]) == 1:
        ref = cve["references"][0]
        print(f"* {ref}")
